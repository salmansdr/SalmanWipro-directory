import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Card, Button, Table, Spinner, Alert } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';

function ProjectEstimation() {
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  // Load project estimation data from FloorDetails.json
  useEffect(() => {
    const loadProjectData = async () => {
      try {
        setLoading(true);
        const response = await fetch(`${process.env.PUBLIC_URL}/FloorDetails.json`);
        if (!response.ok) {
          throw new Error('Failed to load project estimation data');
        }
        
        const data = await response.json();
        
        // Handle both array and single object structures
        const projects = Array.isArray(data) ? data : [data];
        
        // Transform the JSON data to match the grid structure
        const projectRows = projects.map(project => ({
          ref: project.estimationRef || 'N/A',
          description: project.description || 'No description available',
          location: project.projectDetails?.city || 'Not specified',
          creationDate: project.createdDate || 'N/A',
          modificationDate: project.modifiedDate || 'N/A',
          createdBy: project.createdBy || 'Unknown',
          modifiedBy: project.modifiedBy || 'Unknown',
          action: 'Edit',
          // Store additional project details for future use
          projectDetails: project.projectDetails,
          floorConfiguration: project.floorConfiguration,
          costEstimation: project.costEstimation,
          metadata: project.metadata
        }));
        
        setRows(projectRows);
        setError(null);
      } catch (err) {
        console.error('Error loading project data:', err);
        setError(err.message);
        // Fallback to empty array if JSON fails to load
        setRows([]);
      } finally {
        setLoading(false);
      }
    };

    loadProjectData();
  }, []);

  const handleNewEntry = async () => {
    try {
      // Load FloorDetails.json to get the last estimation reference
      const response = await fetch(`${process.env.PUBLIC_URL}/FloorDetails.json`);
      let nextEstimationRef = `EST-${Date.now()}`; // Fallback if JSON load fails
      
      if (response.ok) {
        const data = await response.json();
        
        // Handle both array and single object structures
        const projects = Array.isArray(data) ? data : [data];
        
        if (projects.length > 0) {
          // Find the highest estimation reference number
          let maxRefNumber = 0;
          
          projects.forEach(project => {
            if (project.estimationRef) {
              const refMatch = project.estimationRef.match(/EST-(\d+)/);
              if (refMatch) {
                const refNumber = parseInt(refMatch[1]);
                if (refNumber > maxRefNumber) {
                  maxRefNumber = refNumber;
                }
              }
            }
          });
          
          if (maxRefNumber > 0) {
            const nextNumber = maxRefNumber + 1;
            nextEstimationRef = `EST-${nextNumber}`;
          }
        }
      }
      
      navigate('/pricing-calculator', { 
        state: { 
          mode: 'new',
          autoGeneratedRef: nextEstimationRef
        } 
      });
    } catch (error) {
      console.error('Error generating estimation reference:', error);
      // Fallback to timestamp-based reference
      const fallbackRef = `EST-${Date.now()}`;
      navigate('/pricing-calculator', { 
        state: { 
          mode: 'new',
          autoGeneratedRef: fallbackRef
        } 
      });
    }
  };

  const handleRefClick = (ref) => {
    // Find the project data for this reference
    const projectData = rows.find(row => row.ref === ref);
    navigate('/pricing-calculator', { 
      state: { 
        mode: 'view', 
        ref: ref,
        projectData: projectData // Pass complete project data
      } 
    });
  };

  const handleEditClick = (ref) => {
    // Find the project data for this reference
    const projectData = rows.find(row => row.ref === ref);
    navigate('/pricing-calculator', { 
      state: { 
        mode: 'edit', 
        ref: ref,
        projectData: projectData // Pass complete project data
      } 
    });
  };

  // Delete row handler
  const handleDelete = (ref) => {
    if (window.confirm('Are you sure you want to delete this estimation?')) {
      setRows(rows.filter(row => row.ref !== ref));
    }
  };

  // Loading state
  if (loading) {
    return (
      <Container className="py-4 text-center">
        <Spinner animation="border" role="status" variant="primary">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
        <div className="mt-2">Loading project estimation data...</div>
      </Container>
    );
  }

  // Error state
  if (error) {
    return (
      <Container className="py-4">
        <Alert variant="danger">
          <Alert.Heading>Error Loading Data</Alert.Heading>
          <p>Unable to load project estimation data: {error}</p>
          <hr />
          <div className="d-flex justify-content-end">
            <Button onClick={() => window.location.reload()} variant="outline-danger">
              Retry
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  return (
    <Container className="py-4">
      <div className="d-flex justify-content-end mb-2">
        <Button
          style={{ backgroundColor: '#199e60', borderColor: '#199e60', color: 'white', display: 'flex', alignItems: 'center', gap: '8px', fontWeight: 500, fontSize: '1.1rem', padding: '0.5rem 1.5rem' }}
          onClick={handleNewEntry}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="white" viewBox="0 0 16 16" style={{marginRight: '4px'}}>
            <path d="M8 1a.5.5 0 0 1 .5.5v6h6a.5.5 0 0 1 0 1h-6v6a.5.5 0 0 1-1 0v-6h-6a.5.5 0 0 1 0-1h6v-6A.5.5 0 0 1 8 1z"/>
          </svg>
          New Entry
        </Button>
      </div>
      <Card className="mb-4 shadow-sm">
        <Card.Header as="h3" className="bg-primary text-white">
          Project Estimation
        </Card.Header>
        <Card.Body>
          <Card className="mb-4">
            <Card.Header as="h5" className="bg-info text-white">Estimation List</Card.Header>
            <Card.Body>
              <Table bordered hover responsive size="sm">
                <thead className="table-light">
                  <tr>
                    <th>Estimation Ref#</th>
                    <th>Description</th>
                    <th>Location</th>
                    <th>Creation Date</th>
                    <th>Modification Date</th>
                    <th>Created By</th>
                    <th>Modified By</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  {rows.map((row, idx) => (
                    <tr key={row.ref}>
                      <td>
                        <Button variant="link" onClick={() => handleRefClick(row.ref)} style={{padding: 0}}>{row.ref}</Button>
                      </td>
                      <td>{row.description}</td>
                      <td>{row.location}</td>
                      <td>{row.creationDate}</td>
                      <td>{row.modificationDate}</td>
                      <td>{row.createdBy}</td>
                      <td>{row.modifiedBy}</td>
                      <td className="d-flex gap-2">
                        <Button variant="outline-primary" size="sm" onClick={() => handleEditClick(row.ref)}>Edit</Button>
                        <Button variant="outline-danger" size="sm" onClick={() => handleDelete(row.ref)}>Delete</Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Card.Body>
          </Card>
        </Card.Body>
      </Card>
    </Container>
  );
}

export default ProjectEstimation;
